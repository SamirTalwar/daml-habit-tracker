module Model where

import DA.Date
import qualified DA.Optional as Optional

template HabitProposal
  with
    owner : Party
    keepingHonest : Party
    name : Text
  where
    signatory owner
    observer keepingHonest

    ensure name /= "" && owner /= keepingHonest

    controller keepingHonest can
      preconsuming HabitProposal_Accept : ContractId Habit
        do
          create Habit with
            owner
            keepingHonest = Some keepingHonest
            name

template Habit
  with
    owner : Party
    keepingHonest : Optional Party
    name : Text
  where
    signatory owner
    signatory keepingHonest

    ensure validateHabit this

    controller owner can
      nonconsuming Habit_Record : ContractId Recording
        with
          dateCompleted : Date
        do
          assertMsg "You must keep yourself honest by creating a pending recording." $
            Optional.isNone keepingHonest
          validateRecording dateCompleted
          create Recording with
            habit = this
            dateCompleted

      nonconsuming Habit_RecordPending : ContractId PendingRecording
        with
          dateCompleted : Date
        do
          assertMsg "You do not need to create a pending recording." $
            Optional.isSome keepingHonest
          validateRecording dateCompleted
          create PendingRecording with
            habit = this
            dateCompleted

template Recording
  with
    habit : Habit
    dateCompleted : Date
  where
    signatory habit.owner
    signatory habit.keepingHonest

    ensure validateHabit habit

template PendingRecording
  with
    habit : Habit
    dateCompleted : Date
  where
    signatory habit.owner
    signatory habit.keepingHonest

    ensure validateHabit habit

    controller habit.keepingHonest can
      preconsuming PendingRecording_Accept : ContractId Recording
        do
          create Recording with
            habit
            dateCompleted
      preconsuming PendingRecording_Reject : ()
        do
          return ()

validateHabit : Habit -> Bool
validateHabit habit = habit.name /= "" && habit.keepingHonest /= Some habit.owner

validateRecording : (CanAbort m, HasTime m) => Date -> m ()
validateRecording dateCompleted = do
  today <- toDateUTC <$> getTime
  let yesterday = addDays today (-1)
  assertMsg "You can only record a habit for today or yesterday." $
    dateCompleted == today || dateCompleted == yesterday
